--- submodule/acme_copy/acme/acme_structure.go	2024-10-10 09:36:57.259784700 +0800
+++ submodule/acme/acme/acme_structure.go	2024-10-15 12:37:28.248192500 +0800
@@ -10,8 +10,11 @@
 	"encoding/pem"
 	"errors"
 	"fmt"
+	"net"
+	"net/http"
 	"time"
 
+	"github.com/cenkalti/backoff/v4"
 	"github.com/go-acme/lego/v4/certcrypto"
 	"github.com/go-acme/lego/v4/certificate"
 	"github.com/go-acme/lego/v4/lego"
@@ -20,6 +23,10 @@
 	"software.sslmate.com/src/go-pkcs12"
 )
 
+const (
+	DefaultMaxElapsedTime = 120 * time.Minute
+)
+
 // acmeUser implements acme.User.
 type acmeUser struct {
 
@@ -84,17 +91,32 @@
 		return nil, nil, fmt.Errorf("error getting user data: %s", err.Error())
 	}
 
-	client, err := lego.NewClient(expandACMEClient_config(d, meta, user))
-	if err != nil {
-		return nil, nil, err
-	}
+	var client *lego.Client
 
-	// Populate user's registration resource if needed
-	if loadReg {
-		user.Registration, err = client.Registration.ResolveAccountByKey()
+	newClient := func() error {
+		client, err = lego.NewClient(expandACMEClient_config(d, meta, user))
 		if err != nil {
-			return nil, nil, err
+			return err
+		}
+
+		// Populate user's registration resource if needed
+		if loadReg {
+			user.Registration, err = client.Registration.ResolveAccountByKey()
+			if err != nil {
+				if isAbleToRetry(err.Error()) {
+					return err
+				} else {
+					return backoff.Permanent(err)
+				}
+			}
 		}
+		return nil
+	}
+	reconnectBackoff := backoff.NewExponentialBackOff()
+	reconnectBackoff.MaxElapsedTime = DefaultMaxElapsedTime
+	err = backoff.Retry(newClient, reconnectBackoff)
+	if err != nil {
+		return nil, nil, err
 	}
 
 	return client, user, nil
@@ -102,7 +124,7 @@
 
 func expandACMEClient_config(d *schema.ResourceData, meta interface{}, user registration.User) *lego.Config {
 	config := lego.NewConfig(user)
-	config.CADirURL = meta.(*Config).ServerURL
+	config.CADirURL = meta.(*PvdCfg).ServerURL
 
 	// Note this function is used by both the registration and certificate
 	// resources, but key type is not necessary during registration, so
@@ -117,6 +139,16 @@
 		config.Certificate.Timeout = time.Second * time.Duration(v.(int))
 	}
 
+	// extended timeout
+	config.HTTPClient.Transport = &http.Transport{
+		DialContext: (&net.Dialer{
+			Timeout:   60 * time.Second,
+			KeepAlive: 60 * time.Second,
+		}).DialContext,
+		TLSHandshakeTimeout:   60 * time.Second,
+		ResponseHeaderTimeout: 60 * time.Second,
+	}
+
 	return config
 }
 
@@ -241,8 +273,11 @@
 	cert = pem.EncodeToMemory(&pem.Block{Type: "CERTIFICATE", Bytes: cb[0].Raw})
 	certNotAfter = cb[0].NotAfter.Format(time.RFC3339)
 	issuer = make([]byte, 0)
-	for _, ic := range cb[1:] {
+	for i, ic := range cb[1:] {
 		issuer = append(issuer, pem.EncodeToMemory(&pem.Block{Type: "CERTIFICATE", Bytes: ic.Raw})...)
+		if i < len(cb)-2 {
+			issuer = append(issuer, '\n')
+		}
 	}
 
 	return
